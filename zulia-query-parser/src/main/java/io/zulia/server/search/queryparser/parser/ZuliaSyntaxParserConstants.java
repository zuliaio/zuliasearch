/* Generated By:JavaCC: Do not edit this line. ZuliaSyntaxParserConstants.java */
package io.zulia.server.search.queryparser.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ZuliaSyntaxParserConstants {

	/**
	 * End of File.
	 */
	int EOF = 0;
	/**
	 * RegularExpression Id.
	 */
	int _NUM_CHAR = 1;
	/**
	 * RegularExpression Id.
	 */
	int _ESCAPED_CHAR = 2;
	/**
	 * RegularExpression Id.
	 */
	int _TERM_START_CHAR = 3;
	/**
	 * RegularExpression Id.
	 */
	int _TERM_CHAR = 4;
	/**
	 * RegularExpression Id.
	 */
	int _WHITESPACE = 5;
	/**
	 * RegularExpression Id.
	 */
	int _QUOTED_CHAR = 6;
	/**
	 * RegularExpression Id.
	 */
	int AND = 8;
	/**
	 * RegularExpression Id.
	 */
	int OR = 9;
	/**
	 * RegularExpression Id.
	 */
	int NOT = 10;
	/**
	 * RegularExpression Id.
	 */
	int FN_PREFIX = 11;
	/**
	 * RegularExpression Id.
	 */
	int ZL_PREFIX = 12;
	/**
	 * RegularExpression Id.
	 */
	int PLUS = 13;
	/**
	 * RegularExpression Id.
	 */
	int MINUS = 14;
	/**
	 * RegularExpression Id.
	 */
	int RPAREN = 15;
	/**
	 * RegularExpression Id.
	 */
	int OP_COLON = 16;
	/**
	 * RegularExpression Id.
	 */
	int OP_EQUAL = 17;
	/**
	 * RegularExpression Id.
	 */
	int OP_LESSTHAN = 18;
	/**
	 * RegularExpression Id.
	 */
	int OP_LESSTHANEQ = 19;
	/**
	 * RegularExpression Id.
	 */
	int OP_MORETHAN = 20;
	/**
	 * RegularExpression Id.
	 */
	int OP_MORETHANEQ = 21;
	/**
	 * RegularExpression Id.
	 */
	int CARAT = 22;
	/**
	 * RegularExpression Id.
	 */
	int TILDE = 23;
	/**
	 * RegularExpression Id.
	 */
	int QUOTED = 24;
	/**
	 * RegularExpression Id.
	 */
	int NUMBER = 25;
	/**
	 * RegularExpression Id.
	 */
	int TERM = 26;
	/**
	 * RegularExpression Id.
	 */
	int REGEXPTERM = 27;
	/**
	 * RegularExpression Id.
	 */
	int RANGEIN_START = 28;
	/**
	 * RegularExpression Id.
	 */
	int RANGEEX_START = 29;
	/**
	 * RegularExpression Id.
	 */
	int LPAREN = 30;
	/**
	 * RegularExpression Id.
	 */
	int NUMERIC_SET = 31;
	/**
	 * RegularExpression Id.
	 */
	int TERM_SET = 32;
	/**
	 * RegularExpression Id.
	 */
	int ATLEAST = 33;
	/**
	 * RegularExpression Id.
	 */
	int AFTER = 34;
	/**
	 * RegularExpression Id.
	 */
	int BEFORE = 35;
	/**
	 * RegularExpression Id.
	 */
	int CONTAINED_BY = 36;
	/**
	 * RegularExpression Id.
	 */
	int CONTAINING = 37;
	/**
	 * RegularExpression Id.
	 */
	int EXTEND = 38;
	/**
	 * RegularExpression Id.
	 */
	int FN_OR = 39;
	/**
	 * RegularExpression Id.
	 */
	int FUZZYTERM = 40;
	/**
	 * RegularExpression Id.
	 */
	int MAXGAPS = 41;
	/**
	 * RegularExpression Id.
	 */
	int MAXWIDTH = 42;
	/**
	 * RegularExpression Id.
	 */
	int NON_OVERLAPPING = 43;
	/**
	 * RegularExpression Id.
	 */
	int NOT_CONTAINED_BY = 44;
	/**
	 * RegularExpression Id.
	 */
	int NOT_CONTAINING = 45;
	/**
	 * RegularExpression Id.
	 */
	int NOT_WITHIN = 46;
	/**
	 * RegularExpression Id.
	 */
	int ORDERED = 47;
	/**
	 * RegularExpression Id.
	 */
	int OVERLAPPING = 48;
	/**
	 * RegularExpression Id.
	 */
	int PHRASE = 49;
	/**
	 * RegularExpression Id.
	 */
	int UNORDERED = 50;
	/**
	 * RegularExpression Id.
	 */
	int UNORDERED_NO_OVERLAPS = 51;
	/**
	 * RegularExpression Id.
	 */
	int WILDCARD = 52;
	/**
	 * RegularExpression Id.
	 */
	int WITHIN = 53;
	/**
	 * RegularExpression Id.
	 */
	int RANGE_TO = 54;
	/**
	 * RegularExpression Id.
	 */
	int RANGEIN_END = 55;
	/**
	 * RegularExpression Id.
	 */
	int RANGEEX_END = 56;
	/**
	 * RegularExpression Id.
	 */
	int RANGE_QUOTED = 57;
	/**
	 * RegularExpression Id.
	 */
	int RANGE_GOOP = 58;

	/**
	 * Lexical state.
	 */
	int Zulia = 0;
	/**
	 * Lexical state.
	 */
	int Function = 1;
	/**
	 * Lexical state.
	 */
	int Range = 2;
	/**
	 * Lexical state.
	 */
	int DEFAULT = 3;

	/**
	 * Literal token values.
	 */
	String[] tokenImage = { "<EOF>", "<_NUM_CHAR>", "<_ESCAPED_CHAR>", "<_TERM_START_CHAR>", "<_TERM_CHAR>", "<_WHITESPACE>", "<_QUOTED_CHAR>",
			"<token of kind 7>", "<AND>", "<OR>", "<NOT>", "\"fn:\"", "\"zl:\"", "\"+\"", "\"-\"", "\")\"", "\":\"", "\"=\"", "\"<\"", "\"<=\"", "\">\"",
			"\">=\"", "\"^\"", "\"~\"", "<QUOTED>", "<NUMBER>", "<TERM>", "<REGEXPTERM>", "\"[\"", "\"{\"", "\"(\"", "<NUMERIC_SET>", "<TERM_SET>", "<ATLEAST>",
			"\"after\"", "\"before\"", "<CONTAINED_BY>", "\"containing\"", "\"extend\"", "\"or\"", "<FUZZYTERM>", "<MAXGAPS>", "<MAXWIDTH>",
			"<NON_OVERLAPPING>", "<NOT_CONTAINED_BY>", "<NOT_CONTAINING>", "<NOT_WITHIN>", "\"ordered\"", "\"overlapping\"", "\"phrase\"", "\"unordered\"",
			"<UNORDERED_NO_OVERLAPS>", "\"wildcard\"", "\"within\"", "\"TO\"", "\"]\"", "\"}\"", "<RANGE_QUOTED>", "<RANGE_GOOP>", "\"@\"", };

}
